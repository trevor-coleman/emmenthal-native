{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { types } from \"mobx-state-tree\";\nimport { CalendarModel } from \"../calendar/calendar\";\nimport { api } from \"../../services/api\";\nimport { findFreeTime, formatFreeTimeText } from \"../../services/free-busy/free-busy\";\nimport { set } from \"date-fns\";\nexport var CalendarStoreModel = types.model(\"CalendarStore\").props({\n  calendars: types.optional(types.map(CalendarModel), {}),\n  selectedIds: types.optional(types.array(types.string), []),\n  freeTimeText: types.optional(types.string, \"\")\n}).views(function (self) {\n  return {\n    get calendarNames() {\n      var result = [];\n      self.calendars.forEach(function (item) {\n        var _item$summaryOverride;\n\n        return result.push((_item$summaryOverride = item.summaryOverride) != null ? _item$summaryOverride : item.summary);\n      });\n      return result;\n    },\n\n    get calendarIds() {\n      var result = [];\n      self.calendars.forEach(function (_ref) {\n        var id = _ref.id;\n        return result.push({\n          id: id\n        });\n      });\n      return result;\n    }\n\n  };\n}).actions(function (self) {\n  return {\n    handleGetCalendarResponse: function handleGetCalendarResponse(response) {\n      var _response$data;\n\n      var calendars = response == null ? void 0 : (_response$data = response.data) == null ? void 0 : _response$data.items;\n      if (!calendars) return;\n      calendars.forEach(function (calendar) {\n        self.calendars.set(calendar.id, calendar);\n      });\n    },\n    handleGetFreeBusyResponse: function handleGetFreeBusyResponse(response) {\n      console.log(\"handling freeBusy Response\", response);\n      var calendars = response.data.calendars;\n      if (!calendars) return;\n      Object.entries(calendars).forEach(function (_ref2) {\n        var _ref3 = _slicedToArray(_ref2, 2),\n            id = _ref3[0],\n            busy = _ref3[1].busy;\n\n        var calendar = self.calendars.get(id);\n        calendar.setBusy(busy);\n      });\n    },\n    updateFreeTimeText: function updateFreeTimeText() {\n      var selectedCalendars = {};\n\n      if (self.selectedIds.length === 0) {\n        self.freeTimeText = \"Select a Calendar\";\n        return;\n      }\n\n      self.calendars.forEach(function (calendar) {\n        if (!self.selectedIds.includes(calendar.id)) return;\n        selectedCalendars[calendar.id] = calendar;\n      });\n      var freeTimes = findFreeTime(selectedCalendars, {\n        date: {\n          customDate: undefined,\n          range: 3,\n          days: [false, true, true, true, true, true, false]\n        },\n        time: {\n          start: set(new Date(), {\n            hours: 10,\n            minutes: 0\n          }),\n          end: set(new Date(), {\n            hours: 20,\n            minutes: 0\n          }),\n          duration: {\n            hours: 1,\n            minutes: 0\n          }\n        }\n      });\n      self.freeTimeText = formatFreeTimeText(freeTimes);\n    }\n  };\n}).actions(function (self) {\n  return {\n    getCalendars: function getCalendars() {\n      return function _callee() {\n        var response;\n        return _regeneratorRuntime.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _regeneratorRuntime.awrap(api.getCalendars());\n\n              case 2:\n                response = _context.sent;\n                self.handleGetCalendarResponse(response);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }();\n    },\n    getFreeBusy: function getFreeBusy(_ref4) {\n      return function _callee2() {\n        var timeMin, timeMax, response;\n        return _regeneratorRuntime.async(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                timeMin = _ref4.timeMin, timeMax = _ref4.timeMax;\n                _context2.next = 3;\n                return _regeneratorRuntime.awrap(api.getFreeBusy({\n                  timeMin: timeMin,\n                  timeMax: timeMax,\n                  calendars: self.calendarIds\n                }));\n\n              case 3:\n                response = _context2.sent;\n                self.handleGetFreeBusyResponse(response);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }();\n    },\n    calendarList: function calendarList() {\n      var result = [];\n      self.calendars.forEach(function (calendar) {\n        var _calendar$summaryOver;\n\n        result.push({\n          id: calendar.id,\n          label: (_calendar$summaryOver = calendar == null ? void 0 : calendar.summaryOverride) != null ? _calendar$summaryOver : calendar == null ? void 0 : calendar.summary\n        });\n      });\n      return result;\n    }\n  };\n}).actions(function (self) {\n  return {\n    setCalendarSelected: function setCalendarSelected(target, selected) {\n      self.selectedIds.replace(self.selectedIds.filter(function (id) {\n        return id !== target;\n      }));\n\n      if (selected) {\n        self.selectedIds.push(target);\n      }\n\n      self.updateFreeTimeText();\n    }\n  };\n});\nexport var createCalendarStoreDefaultModel = function createCalendarStoreDefaultModel() {\n  return types.optional(CalendarStoreModel, {});\n};","map":{"version":3,"sources":["/Users/trevorcoleman/dev/trevor-coleman/EmmenthalCloud/app/models/calendar-store/calendar-store.ts"],"names":["types","CalendarModel","api","findFreeTime","formatFreeTimeText","set","CalendarStoreModel","model","props","calendars","optional","map","selectedIds","array","string","freeTimeText","views","self","calendarNames","result","forEach","item","push","summaryOverride","summary","calendarIds","id","actions","handleGetCalendarResponse","response","data","items","calendar","handleGetFreeBusyResponse","console","log","Object","entries","busy","get","setBusy","updateFreeTimeText","selectedCalendars","length","includes","freeTimes","date","customDate","undefined","range","days","time","start","Date","hours","minutes","end","duration","getCalendars","getFreeBusy","timeMin","timeMax","calendarList","label","setCalendarSelected","target","selected","replace","filter","createCalendarStoreDefaultModel"],"mappings":"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","sourcesContent":["import { Instance, SnapshotOut, types } from \"mobx-state-tree\"\nimport { CalendarModel } from \"../calendar/calendar\"\nimport { api } from \"../../services/api\"\nimport type { FreeBusyItem } from \"../free-busy-item/free-busy-item\"\nimport { AxiosResponse } from \"axios\"\nimport { calendar_v3 } from \"googleapis\"\nimport { findFreeTime, formatFreeTimeText } from \"../../services/free-busy/free-busy\"\nimport { set, subDays } from \"date-fns\"\n\n/**\n * Model description here for TypeScript hints.\n */\nexport const CalendarStoreModel = types\n  .model(\"CalendarStore\")\n  .props({\n    calendars: types.optional(types.map(CalendarModel), {}),\n    selectedIds: types.optional(types.array(types.string), []),\n    freeTimeText: types.optional(types.string, \"\"),\n  })\n\n  .views((self) => ({\n    get calendarNames(): string[] {\n      const result = []\n      self.calendars.forEach((item) => result.push(item.summaryOverride ?? item.summary))\n      return result\n    },\n    get calendarIds(): { id: string }[] {\n      const result = []\n      self.calendars.forEach(({ id }) => result.push({ id }))\n      return result\n    },\n  }))\n  .actions((self) => ({\n    handleGetCalendarResponse(response): void {\n      const calendars = response?.data?.items\n      if (!calendars) return\n      calendars.forEach((calendar) => {\n        self.calendars.set(calendar.id, calendar)\n      })\n    },\n    handleGetFreeBusyResponse(response: AxiosResponse<calendar_v3.Schema$FreeBusyResponse>): void {\n      console.log(\"handling freeBusy Response\", response)\n      const {\n        data: { calendars },\n      } = response\n      if (!calendars) return\n      Object.entries(calendars).forEach(([id, { busy }]) => {\n        const calendar = self.calendars.get(id)\n        calendar.setBusy(busy)\n      })\n    },\n    updateFreeTimeText() {\n      const selectedCalendars = {}\n\n      if (self.selectedIds.length === 0) {\n        self.freeTimeText = \"Select a Calendar\"\n        return\n      }\n\n      self.calendars.forEach((calendar) => {\n        if (!self.selectedIds.includes(calendar.id)) return\n        selectedCalendars[calendar.id] = calendar\n      })\n\n      const freeTimes = findFreeTime(selectedCalendars, {\n        date: {\n          customDate: undefined,\n          range: 3,\n          days: [false, true, true, true, true, true, false],\n        },\n        time: {\n          start: set(new Date(), { hours: 10, minutes: 0 }),\n          end: set(new Date(), { hours: 20, minutes: 0 }),\n          duration: { hours: 1, minutes: 0 },\n        },\n      })\n\n      self.freeTimeText = formatFreeTimeText(freeTimes)\n    },\n  })) // eslint-disable-line @typescript-eslint/no-unused-vars\n  .actions((self) => ({\n    async getCalendars(): Promise<void> {\n      const response = await api.getCalendars()\n      self.handleGetCalendarResponse(response)\n    },\n    async getFreeBusy({ timeMin, timeMax }): Promise<void> {\n      const response: AxiosResponse<calendar_v3.Schema$FreeBusyResponse> = await api.getFreeBusy({\n        timeMin,\n        timeMax,\n        calendars: self.calendarIds,\n      })\n      self.handleGetFreeBusyResponse(response)\n    },\n\n    calendarList() {\n      const result = []\n      self.calendars.forEach((calendar) => {\n        result.push({\n          id: calendar.id,\n          label: calendar?.summaryOverride ?? calendar?.summary,\n        })\n      })\n      return result\n    },\n  }))\n  .actions((self) => ({\n    setCalendarSelected(target: string, selected: boolean) {\n      self.selectedIds.replace(self.selectedIds.filter((id) => id !== target))\n      if (selected) {\n        self.selectedIds.push(target)\n      }\n      self.updateFreeTimeText()\n    },\n  }))\n\ntype CalendarStoreType = Instance<typeof CalendarStoreModel>\n\nexport interface CalendarStore extends CalendarStoreType {}\n\ntype CalendarStoreSnapshotType = SnapshotOut<typeof CalendarStoreModel>\n\nexport interface CalendarStoreSnapshot extends CalendarStoreSnapshotType {}\n\nexport const createCalendarStoreDefaultModel = () => types.optional(CalendarStoreModel, {})\n"]},"metadata":{},"sourceType":"module"}