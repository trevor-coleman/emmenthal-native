{"ast":null,"code":"import { isBefore, isEqual, getHours, getDay, endOfDay, startOfDay, set, getMinutes, max, add, format, clamp } from \"date-fns\";\nexport function findFreeTime(freeBusyData, _ref) {\n  var _timeOptions$start, _timeOptions$end;\n\n  var timeOptions = _ref.time,\n      daysOfWeek = _ref.date.days;\n  var range = {\n    start: (_timeOptions$start = timeOptions == null ? void 0 : timeOptions.start) != null ? _timeOptions$start : set(new Date(), {\n      hours: 9,\n      minutes: 0\n    }),\n    end: (_timeOptions$end = timeOptions == null ? void 0 : timeOptions.end) != null ? _timeOptions$end : set(new Date(), {\n      hours: 17,\n      minutes: 0\n    })\n  };\n  var duration = timeOptions.duration;\n  var queue = [];\n  Object.keys(freeBusyData).forEach(function (i) {\n    return freeBusyData[i].busy.forEach(function (time) {\n      return queue.push({\n        start: new Date(time.start),\n        end: new Date(time.end)\n      });\n    });\n  });\n  queue.sort(function (a, b) {\n    if (isEqual(b.start, a.start)) {\n      if (isEqual(a.end, b.end)) return 0;\n      return isBefore(a.end, b.end) ? -1 : 1;\n    }\n\n    return isBefore(a.start, b.end) ? -1 : 1;\n  });\n  var busy = queue.shift();\n  if (!busy) return [];\n\n  function setTime(timeA, timeB) {\n    return set(timeA, {\n      hours: getHours(new Date(timeB)),\n      minutes: getMinutes(new Date(timeB))\n    });\n  }\n\n  function getDayRange(interval) {\n    return {\n      start: setTime(interval.start, range.start),\n      end: setTime(interval.start, range.end)\n    };\n  }\n\n  var day = getDayRange(busy);\n  var current = {\n    start: day.start,\n    end: day.start\n  };\n  var freeTimes = [];\n\n  while (busy) {\n    var _busy = busy,\n        start = _busy.start,\n        end = _busy.end;\n\n    if (getDay(start) !== getDay(end)) {\n      queue.unshift({\n        start: startOfDay(end),\n        end: end\n      });\n      end = endOfDay(start);\n    }\n\n    if (getDay(current.end) !== getDay(start)) {\n      day = getDayRange(busy);\n      current.start = setTime(start, range.start);\n      current.end = current.start;\n    }\n\n    if (!daysOfWeek[getDay(start)]) {\n      busy = queue.shift();\n      continue;\n    }\n\n    start = clamp(start, day);\n    end = clamp(end, day);\n\n    if (start <= max([current.end, add(current.start, duration)])) {\n      if (end <= current.end) {\n        busy = queue.shift();\n        continue;\n      }\n\n      current.end = end;\n      busy = queue.shift();\n      continue;\n    }\n\n    freeTimes.push({\n      start: current.end,\n      end: start\n    });\n    current.end = end;\n    busy = queue.shift();\n  }\n\n  return freeTimes;\n}\nexport function formatFreeTimeText(freeTime) {\n  var lines = [];\n  var lastDay;\n  freeTime.forEach(function (_ref2, index) {\n    var start = _ref2.start,\n        end = _ref2.end;\n\n    if (getDay(start) !== lastDay) {\n      lastDay = getDay(start);\n\n      if (index > 0) {\n        lines.push(\"\");\n      }\n\n      lines.push(format(start, \"EEE LLL do\"));\n    }\n\n    lines.push(\"\\u2022 \" + format(start, \"h:mmaaaaa\") + \" - \" + format(end, \"h:mmaaaaa\"));\n  });\n  return lines.join(\"\\n\");\n}","map":{"version":3,"sources":["/Users/trevorcoleman/dev/trevor-coleman/EmmenthalCloud/app/services/free-busy/free-busy.ts"],"names":["isBefore","isEqual","getHours","getDay","endOfDay","startOfDay","set","getMinutes","max","add","format","clamp","findFreeTime","freeBusyData","timeOptions","time","daysOfWeek","date","days","range","start","Date","hours","minutes","end","duration","queue","Object","keys","forEach","i","busy","push","sort","a","b","shift","setTime","timeA","timeB","getDayRange","interval","day","current","freeTimes","unshift","formatFreeTimeText","freeTime","lines","lastDay","index","join"],"mappings":"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","sourcesContent":["import {\n  isBefore,\n  isEqual,\n  Interval,\n  getHours,\n  getDay,\n  endOfDay,\n  startOfDay,\n  set,\n  getMinutes,\n  max,\n  add,\n  format,\n  getTime,\n  clamp,\n} from \"date-fns\"\nimport { calendar_v3 } from \"googleapis\"\n\nexport type DaysTuple = [boolean, boolean, boolean, boolean, boolean, boolean, boolean]\n\nexport interface ICalendarOptions {\n  date: {\n    customDate?: Date | number | null\n    range: number | null\n    days: DaysTuple\n  }\n  time: {\n    start: Date | number | null\n    end: Date | number | null\n    duration: Duration\n  }\n}\n\nexport type FreeBusyData = Record<string, { busy: { start: Date | number; end: Date | number }[] }>\n\nexport function findFreeTime(\n  freeBusyData: FreeBusyData,\n  { time: timeOptions, date: { days: daysOfWeek } }: ICalendarOptions,\n): Interval[] {\n  const range: Interval = {\n    start: timeOptions?.start ?? set(new Date(), { hours: 9, minutes: 0 }),\n    end: timeOptions?.end ?? set(new Date(), { hours: 17, minutes: 0 }),\n  }\n\n  const { duration } = timeOptions\n  const queue: Interval[] = []\n\n  Object.keys(freeBusyData).forEach((i) =>\n    freeBusyData[i].busy.forEach((time) =>\n      queue.push({ start: new Date(time.start!), end: new Date(time.end!) }),\n    ),\n  )\n\n  queue.sort((a, b) => {\n    if (isEqual(b.start, a.start)) {\n      if (isEqual(a.end, b.end)) return 0\n      return isBefore(a.end, b.end) ? -1 : 1\n    }\n    return isBefore(a.start, b.end) ? -1 : 1\n  })\n\n  let busy: Interval | undefined = queue.shift()\n  if (!busy) return []\n\n  function setTime(timeA: Date | number, timeB: Date | number) {\n    return set(timeA, {\n      hours: getHours(new Date(timeB)),\n      minutes: getMinutes(new Date(timeB)),\n    })\n  }\n\n  function getDayRange(interval: Interval) {\n    return {\n      start: setTime(interval.start, range.start),\n      end: setTime(interval.start, range.end),\n    }\n  }\n\n  let day = getDayRange(busy)\n\n  let current: Interval = { start: day.start, end: day.start }\n\n  const freeTimes: Interval[] = []\n\n  while (busy) {\n    let { start, end } = busy\n\n    //If event crosses midnight split (at midnight) into two events\n    if (getDay(start) !== getDay(end)) {\n      queue.unshift({ start: startOfDay(end), end })\n      end = endOfDay(start)\n    }\n\n    //If next event is on a different day, reset day\n    if (getDay(current.end) !== getDay(start)) {\n      day = getDayRange(busy)\n      current.start = setTime(start, range.start)\n      current.end = current.start\n    }\n\n    if (!daysOfWeek[getDay(start)]) {\n      busy = queue.shift()\n      continue\n    }\n\n    start = clamp(start, day)\n    end = clamp(end, day)\n\n    if (start <= max([current.end, add(current.start, duration)])) {\n      if (end <= current.end) {\n        busy = queue.shift()\n        continue\n      }\n      current.end = end\n      busy = queue.shift()\n      continue\n    }\n    freeTimes.push({\n      start: current.end,\n      end: start,\n    })\n\n    current.end = end\n    busy = queue.shift()\n  }\n\n  return freeTimes\n}\n\nexport function formatFreeTimeText(freeTime: Interval[]) {\n  const lines: string[] = []\n\n  let lastDay: Date | number | undefined\n\n  freeTime.forEach(({ start, end }, index) => {\n    if (getDay(start) !== lastDay) {\n      lastDay = getDay(start)\n      if (index > 0) {\n        lines.push(\"\")\n      }\n      lines.push(format(start, \"EEE LLL do\"))\n    }\n    lines.push(`• ${format(start, \"h:mmaaaaa\")} - ${format(end, \"h:mmaaaaa\")}`)\n  })\n\n  return lines.join(\"\\n\")\n}\n"]},"metadata":{},"sourceType":"module"}