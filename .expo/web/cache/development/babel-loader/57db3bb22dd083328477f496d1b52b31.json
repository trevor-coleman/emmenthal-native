{"ast":null,"code":"import * as React from \"react\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useSafeAreaInsets } from \"react-native-safe-area-context\";\nimport { isNonScrolling, offsets, presets } from \"./screen.presets\";\nvar isIos = Platform.OS === \"ios\";\n\nfunction ScreenWithoutScrolling(props) {\n  var insets = useSafeAreaInsets();\n  var preset = presets.fixed;\n  var style = props.style || {};\n  var backgroundStyle = props.backgroundColor ? {\n    backgroundColor: props.backgroundColor\n  } : {};\n  var insetStyle = {\n    paddingTop: props.unsafe ? 0 : insets.top\n  };\n  return React.createElement(KeyboardAvoidingView, {\n    style: [preset.outer, backgroundStyle],\n    behavior: isIos ? \"padding\" : undefined,\n    keyboardVerticalOffset: offsets[props.keyboardOffset || \"none\"]\n  }, React.createElement(StatusBar, {\n    barStyle: props.statusBar || \"light-content\"\n  }), React.createElement(View, {\n    style: [preset.inner, style, insetStyle]\n  }, props.children));\n}\n\nfunction ScreenWithScrolling(props) {\n  var insets = useSafeAreaInsets();\n  var preset = presets.scroll;\n  var style = props.style || {};\n  var backgroundStyle = props.backgroundColor ? {\n    backgroundColor: props.backgroundColor\n  } : {};\n  var insetStyle = {\n    paddingTop: props.unsafe ? 0 : insets.top\n  };\n  return React.createElement(KeyboardAvoidingView, {\n    style: [preset.outer, backgroundStyle],\n    behavior: isIos ? \"padding\" : undefined,\n    keyboardVerticalOffset: offsets[props.keyboardOffset || \"none\"]\n  }, React.createElement(StatusBar, {\n    barStyle: props.statusBar || \"light-content\"\n  }), React.createElement(View, {\n    style: [preset.outer, backgroundStyle, insetStyle]\n  }, React.createElement(ScrollView, {\n    style: [preset.outer, backgroundStyle],\n    contentContainerStyle: [preset.inner, style],\n    keyboardShouldPersistTaps: props.keyboardShouldPersistTaps || \"handled\"\n  }, props.children)));\n}\n\nexport function Screen(props) {\n  if (isNonScrolling(props.preset)) {\n    return React.createElement(ScreenWithoutScrolling, props);\n  } else {\n    return React.createElement(ScreenWithScrolling, props);\n  }\n}","map":{"version":3,"sources":["/Users/trevorcoleman/dev/trevor-coleman/EmmenthalCloud/app/components/screen/screen.tsx"],"names":["React","useSafeAreaInsets","isNonScrolling","offsets","presets","isIos","Platform","OS","ScreenWithoutScrolling","props","insets","preset","fixed","style","backgroundStyle","backgroundColor","insetStyle","paddingTop","unsafe","top","outer","undefined","keyboardOffset","statusBar","inner","children","ScreenWithScrolling","scroll","keyboardShouldPersistTaps","Screen"],"mappings":"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","sourcesContent":["import * as React from \"react\"\nimport { KeyboardAvoidingView, Platform, ScrollView, StatusBar, View } from \"react-native\"\nimport { useSafeAreaInsets } from \"react-native-safe-area-context\"\nimport { ScreenProps } from \"./screen.props\"\nimport { isNonScrolling, offsets, presets } from \"./screen.presets\"\n\nconst isIos = Platform.OS === \"ios\"\n\nfunction ScreenWithoutScrolling(props: ScreenProps) {\n  const insets = useSafeAreaInsets()\n  const preset = presets.fixed\n  const style = props.style || {}\n  const backgroundStyle = props.backgroundColor ? { backgroundColor: props.backgroundColor } : {}\n  const insetStyle = { paddingTop: props.unsafe ? 0 : insets.top }\n\n  return (\n    <KeyboardAvoidingView\n      style={[preset.outer, backgroundStyle]}\n      behavior={isIos ? \"padding\" : undefined}\n      keyboardVerticalOffset={offsets[props.keyboardOffset || \"none\"]}\n    >\n      <StatusBar barStyle={props.statusBar || \"light-content\"} />\n      <View style={[preset.inner, style, insetStyle]}>{props.children}</View>\n    </KeyboardAvoidingView>\n  )\n}\n\nfunction ScreenWithScrolling(props: ScreenProps) {\n  const insets = useSafeAreaInsets()\n  const preset = presets.scroll\n  const style = props.style || {}\n  const backgroundStyle = props.backgroundColor ? { backgroundColor: props.backgroundColor } : {}\n  const insetStyle = { paddingTop: props.unsafe ? 0 : insets.top }\n\n  return (\n    <KeyboardAvoidingView\n      style={[preset.outer, backgroundStyle]}\n      behavior={isIos ? \"padding\" : undefined}\n      keyboardVerticalOffset={offsets[props.keyboardOffset || \"none\"]}\n    >\n      <StatusBar barStyle={props.statusBar || \"light-content\"} />\n      <View style={[preset.outer, backgroundStyle, insetStyle]}>\n        <ScrollView\n          style={[preset.outer, backgroundStyle]}\n          contentContainerStyle={[preset.inner, style]}\n          keyboardShouldPersistTaps={props.keyboardShouldPersistTaps || \"handled\"}\n        >\n          {props.children}\n        </ScrollView>\n      </View>\n    </KeyboardAvoidingView>\n  )\n}\n\n/**\n * The starting component on every screen in the app.\n *\n * @param props The screen props\n */\nexport function Screen(props: ScreenProps) {\n  if (isNonScrolling(props.preset)) {\n    return <ScreenWithoutScrolling {...props} />\n  } else {\n    return <ScreenWithScrolling {...props} />\n  }\n}\n"]},"metadata":{},"sourceType":"module"}