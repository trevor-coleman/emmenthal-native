{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport { api } from \"../../services/api\";\nvar signIn = api.signIn;\nvar AuthContext = createContext(undefined);\nexport function AuthProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      authenticated = _useState2[0],\n      setAuthenticated = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      authUrl = _useState4[0],\n      setAuthUrl = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      user = _useState6[0],\n      setUser = _useState6[1];\n\n  var _useState7 = useState(nanoid()),\n      _useState8 = _slicedToArray(_useState7, 2),\n      lastLoginAttempt = _useState8[0],\n      setLastLoginAttempt = _useState8[1];\n\n  function attemptSignIn() {\n    console.log(authUrl);\n\n    if (authUrl) {\n      Linking.canOpenURL(authUrl).then(function (supported) {\n        if (supported) {\n          Linking.openURL(authUrl);\n        } else {\n          console.log(\"Don't know how to open URI: \" + authUrl);\n        }\n      });\n    }\n\n    setLastLoginAttempt(nanoid());\n  }\n\n  function handleSignIn(_ref2) {\n    var authenticated = _ref2.authenticated,\n        authUrl = _ref2.authUrl,\n        user = _ref2.user;\n    setAuthenticated(authenticated);\n    setAuthUrl(authUrl);\n    setUser(user);\n  }\n\n  useEffect(function () {\n    signIn(handleSignIn);\n  }, [lastLoginAttempt]);\n  return React.createElement(AuthContext.Provider, {\n    value: {\n      authenticated: authenticated,\n      authUrl: authUrl,\n      user: user,\n      signIn: attemptSignIn\n    }\n  }, children);\n}\nexport function useAuth() {\n  var authContext = useContext(AuthContext);\n\n  if (typeof authContext === 'undefined') {\n    throw new Error('use Auth must be used within an AuthProvider');\n  }\n\n  return authContext;\n}","map":{"version":3,"sources":["/Users/trevorcoleman/dev/trevor-coleman/EmmenthalCloud/app/components/auth-provider/auth-provider.tsx"],"names":["React","createContext","useContext","useEffect","useState","nanoid","api","signIn","AuthContext","undefined","AuthProvider","children","authenticated","setAuthenticated","authUrl","setAuthUrl","user","setUser","lastLoginAttempt","setLastLoginAttempt","attemptSignIn","console","log","Linking","canOpenURL","then","supported","openURL","handleSignIn","useAuth","authContext","Error"],"mappings":";AAAA,OAAOA,KAAP,IACEC,aADF,EAGEC,UAHF,EAIEC,SAJF,EAKEC,QALF,QAMO,OANP;AAOA,SAASC,MAAT,QAAuB,QAAvB;;AAEA,SAAQC,GAAR;AAEA,IAAOC,MAAP,GAAiBD,GAAjB,CAAOC,MAAP;AAaA,IAAMC,WAAW,GAAGP,aAAa,CAC7BQ,SAD6B,CAAjC;AAIA,OAAO,SAASC,YAAT,OAEuE;AAAA,MAD/CC,QAC+C,QAD/CA,QAC+C;;AAC5E,kBAA0CP,QAAQ,CAAC,KAAD,CAAlD;AAAA;AAAA,MAAOQ,aAAP;AAAA,MAAsBC,gBAAtB;;AACA,mBAA8BT,QAAQ,EAAtC;AAAA;AAAA,MAAOU,OAAP;AAAA,MAAgBC,UAAhB;;AACA,mBAAwBX,QAAQ,EAAhC;AAAA;AAAA,MAAOY,IAAP;AAAA,MAAaC,OAAb;;AACA,mBAAgDb,QAAQ,CAACC,MAAM,EAAP,CAAxD;AAAA;AAAA,MAAOa,gBAAP;AAAA,MAAyBC,mBAAzB;;AAEA,WAASC,aAAT,GAAyB;AACvBC,IAAAA,OAAO,CAACC,GAAR,CAAYR,OAAZ;;AACA,QAAIA,OAAJ,EAAa;AACXS,MAAAA,OAAO,CAACC,UAAR,CAAmBV,OAAnB,EAA4BW,IAA5B,CAAiC,UAAAC,SAAS,EAAI;AAC5C,YAAIA,SAAJ,EAAe;AACbH,UAAAA,OAAO,CAACI,OAAR,CAAgBb,OAAhB;AACD,SAFD,MAEO;AACLO,UAAAA,OAAO,CAACC,GAAR,CAAY,iCAAiCR,OAA7C;AACD;AACF,OAND;AAOD;;AACDK,IAAAA,mBAAmB,CAACd,MAAM,EAAP,CAAnB;AACD;;AAED,WAASuB,YAAT,QAAsE;AAAA,QAA9ChB,aAA8C,SAA9CA,aAA8C;AAAA,QAA/BE,OAA+B,SAA/BA,OAA+B;AAAA,QAAtBE,IAAsB,SAAtBA,IAAsB;AACpEH,IAAAA,gBAAgB,CAACD,aAAD,CAAhB;AACAG,IAAAA,UAAU,CAACD,OAAD,CAAV;AACAG,IAAAA,OAAO,CAACD,IAAD,CAAP;AACD;;AAEDb,EAAAA,SAAS,CAAC,YAAM;AACdI,IAAAA,MAAM,CAACqB,YAAD,CAAN;AACD,GAFQ,EAEN,CAACV,gBAAD,CAFM,CAAT;AAIA,SACI,oBAAC,WAAD,CAAa,QAAb;AACI,IAAA,KAAK,EAAE;AAAEN,MAAAA,aAAa,EAAbA,aAAF;AAAiBE,MAAAA,OAAO,EAAPA,OAAjB;AAA0BE,MAAAA,IAAI,EAAJA,IAA1B;AAAgCT,MAAAA,MAAM,EAAEa;AAAxC;AADX,KAGGT,QAHH,CADJ;AAOD;AAED,OAAO,SAASkB,OAAT,GAAmB;AACxB,MAAMC,WAAW,GAAG5B,UAAU,CAACM,WAAD,CAA9B;;AACA,MAAI,OAAOsB,WAAP,KAAuB,WAA3B,EAAwC;AACtC,UAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACD;;AACD,SAAOD,WAAP;AACD","sourcesContent":["import React, {\n  createContext,\n  PropsWithChildren,\n  useContext,\n  useEffect,\n  useState,\n} from 'react';\nimport { nanoid } from 'nanoid';\nimport {Linking} from \"react-native\";\nimport {api} from '../../services/api';\n\nconst {signIn} = api;\n\n\nexport interface IAuthContext {\n  authUrl?: string;\n  authenticated: boolean;\n  user: any;\n}\n\nexport interface IAuthContextWithMethods extends IAuthContext {\n  signIn: () => void;\n}\n\nconst AuthContext = createContext<IAuthContextWithMethods | undefined>(\n    undefined\n);\n\nexport function AuthProvider({\n                               children,\n                             }: PropsWithChildren<IAuthContext>): JSX.Element {\n  const [authenticated, setAuthenticated] = useState(false);\n  const [authUrl, setAuthUrl] = useState<string | undefined>();\n  const [user, setUser] = useState<any>();\n  const [lastLoginAttempt, setLastLoginAttempt] = useState(nanoid());\n\n  function attemptSignIn() {\n    console.log(authUrl);\n    if (authUrl) {\n      Linking.canOpenURL(authUrl).then(supported => {\n        if (supported) {\n          Linking.openURL(authUrl);\n        } else {\n          console.log(\"Don't know how to open URI: \" + authUrl);\n        }\n      })\n    }\n    setLastLoginAttempt(nanoid());\n  }\n\n  function handleSignIn({ authenticated, authUrl, user }: IAuthContext) {\n    setAuthenticated(authenticated);\n    setAuthUrl(authUrl);\n    setUser(user);\n  }\n\n  useEffect(() => {\n    signIn(handleSignIn);\n  }, [lastLoginAttempt]);\n\n  return (\n      <AuthContext.Provider\n          value={{ authenticated, authUrl, user, signIn: attemptSignIn }}\n      >\n        {children}\n      </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const authContext = useContext(AuthContext);\n  if (typeof authContext === 'undefined') {\n    throw new Error('use Auth must be used within an AuthProvider');\n  }\n  return authContext;\n}\n\n\n"]},"metadata":{},"sourceType":"module"}