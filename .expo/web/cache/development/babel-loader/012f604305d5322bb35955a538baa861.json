{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ModalServiceType = function () {\n  function ModalServiceType() {\n    _classCallCheck(this, ModalServiceType);\n\n    this.panel = null;\n    this.shouldUseTopInsets = false;\n  }\n\n  _createClass(ModalServiceType, [{\n    key: \"mount\",\n    value: function mount(panel) {\n      this.panel = panel;\n    }\n  }, {\n    key: \"unmount\",\n    value: function unmount() {\n      this.panel = null;\n    }\n  }, {\n    key: \"show\",\n    value: function show(element, config) {\n      if (this.panel) {\n        return this.panel.show(element, config);\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(identifier, children) {\n      if (this.panel) {\n        this.panel.update(identifier, children);\n      }\n    }\n  }, {\n    key: \"hide\",\n    value: function hide(identifier) {\n      if (this.panel) {\n        return this.panel.hide(identifier);\n      }\n    }\n  }, {\n    key: \"setShouldUseTopInsets\",\n    set: function set(state) {\n      this.shouldUseTopInsets = state;\n    }\n  }, {\n    key: \"getShouldUseTopInsets\",\n    get: function get() {\n      return this.shouldUseTopInsets;\n    }\n  }]);\n\n  return ModalServiceType;\n}();\n\nexports.ModalService = new ModalServiceType();","map":{"version":3,"sources":["../../../../../src/components/theme/modal/modal.service.tsx"],"names":[],"mappings":";AAAA;;;;AAIG;;;;;;;;;;IA0FG,gB;AAAN,8BAAA;AAAA;;AAEE,SAAA,KAAA,GAAgC,IAAhC;AACQ,SAAA,kBAAA,GAA8B,KAA9B;AAmCT;;;;WAjCQ,eAAM,KAAN,EAAmC;AACxC,WAAK,KAAL,GAAa,KAAb;AACD;;;WAEM,mBAAO;AACZ,WAAK,KAAL,GAAa,IAAb;AACD;;;WAEM,cAAK,OAAL,EAAkC,MAAlC,EAA+D;AACpE,UAAI,KAAK,KAAT,EAAgB;AACd,eAAO,KAAK,KAAL,CAAW,IAAX,CAAgB,OAAhB,EAAyB,MAAzB,CAAP;AACD;AACF;;;WAEM,gBAAO,UAAP,EAA2B,QAA3B,EAAuD;AAC5D,UAAI,KAAK,KAAT,EAAgB;AACd,aAAK,KAAL,CAAW,MAAX,CAAkB,UAAlB,EAA8B,QAA9B;AACD;AACF;;;WAEM,cAAK,UAAL,EAAuB;AAC5B,UAAI,KAAK,KAAT,EAAgB;AACd,eAAO,KAAK,KAAL,CAAW,IAAX,CAAgB,UAAhB,CAAP;AACD;AACF;;;SAED,aAAiC,KAAjC,EAA+C;AAC7C,WAAK,kBAAL,GAA0B,KAA1B;AACD;;;SAED,eAAgC;AAC9B,aAAO,KAAK,kBAAZ;AACD;;;;;;AAgBU,OAAA,CAAA,YAAA,GAAe,IAAI,gBAAJ,EAAf","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Singleton service designed to manage modal components.\n *\n * @type ModalService\n *\n * @method {(element: React.ReactElement<ModalPresentingBased>, config: ModalPresentingConfig) => string} show -\n * Shows component in a modal window. Returns its id.\n *\n * @method {(identifier: string) => string} hide - Hides component from a modal window and returns empty string.\n *\n * @method {(identifier: string, children: React.ReactNode) => void} update - Updates component from a modal window.\n *\n * @property {boolean} getShouldUseTopInsets - returns `true` if StatusBar additional offset is not enabled, returns `false`\n * if StatusBar additional offset is enabled.\n *\n * @property {boolean} setShouldUseTopInsets - `true` value enables StatusBar additional offset, `false` disables StatusBar\n * additional offset\n *\n * @overview-example Simple Usage example\n * ModalService simple usage example.\n *\n * ```\n * import React from 'react';\n * import { Layout, Button, Text, ModalService } from '@ui-kitten/components';\n *\n * export const ModalServiceShowcase = () => {\n *\n *   let modalID = '';\n *\n *   const showModal = () => {\n *     const contentElement = renderModalContentElement();\n *     modalID = ModalService.show(contentElement, { onBackdropPress: hideModal });\n *   };\n *\n *   const hideModal = () => {\n *     ModalService.hide(modalID);\n *   };\n *\n *   const renderModalContentElement = () => {\n *     return (\n *       <Layout>\n *         <Text>Hi, I'm modal!</Text>\n *       </Layout>\n *     );\n *   };\n *\n *   return (\n *     <Layout>\n *       <Button onPress={showModal}>SHOW MODAL</Button>\n *       <Button onPress={hideModal}>HIDE MODAL</Button>\n *     </Layout>\n *   );\n * }\n * ```\n *\n * @overview-example StatusBar additional offset support configuration\n * ModalService could also control additional status bar offset configuration for all related UI Kitten measurable elements like\n * [Modal](components/modal) and [Popover](components/popover).\n *\n * ```\n * import React from 'react';\n * import * as eva from '@eva-design/eva';\n * import { ApplicationProvider, Layout, Text, ModalService } from '@ui-kitten/components';\n *\n * ModalService.setShouldUseTopInsets = true //applies StatusBar additional offset\n *\n * const HomeScreen = () => (\n *   <Layout style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>\n *     <Text category='h1'>HOME</Text>\n *   </Layout>\n * );\n *\n * export default () => {\n *\n *   return (\n *     <ApplicationProvider {...eva} theme={eva.light}>\n *       <HomeScreen />\n *     </ApplicationProvider>\n *   )\n * };\n * ```\n */\nclass ModalServiceType {\n    constructor() {\n        this.panel = null;\n        this.shouldUseTopInsets = false;\n    }\n    mount(panel) {\n        this.panel = panel;\n    }\n    unmount() {\n        this.panel = null;\n    }\n    show(element, config) {\n        if (this.panel) {\n            return this.panel.show(element, config);\n        }\n    }\n    update(identifier, children) {\n        if (this.panel) {\n            this.panel.update(identifier, children);\n        }\n    }\n    hide(identifier) {\n        if (this.panel) {\n            return this.panel.hide(identifier);\n        }\n    }\n    set setShouldUseTopInsets(state) {\n        this.shouldUseTopInsets = state;\n    }\n    get getShouldUseTopInsets() {\n        return this.shouldUseTopInsets;\n    }\n}\nexports.ModalService = new ModalServiceType();\n//# sourceMappingURL=modal.service.js.map"]},"metadata":{},"sourceType":"script"}