{"ast":null,"code":"import { types } from \"mobx-state-tree\";\nimport { UserModel } from \"../user/user\";\nimport { api } from \"../../services/api\";\nimport { nanoid } from \"nanoid\";\nexport var AuthStoreModel = types.model(\"AuthStore\").props({\n  authenticated: false,\n  lastLoginAttempt: types.maybe(types.string),\n  authUrl: types.maybe(types.string),\n  user: types.optional(UserModel, {}),\n  token: types.optional(types.string, \"\")\n}).views(function (self) {\n  return {};\n}).actions(function (self) {\n  return {\n    handleSignIn: function handleSignIn(result) {\n      console.table(\"signIn Result\", result);\n      var authUrl = result.authUrl,\n          authenticated = result.authenticated,\n          user = result.user;\n      self.authUrl = authUrl;\n      self.authenticated = authenticated;\n      self.user = user;\n    },\n    setLastLoginAttempt: function setLastLoginAttempt(id) {\n      self.lastLoginAttempt = id;\n    }\n  };\n}).actions(function (self) {\n  return {\n    handleSignInResponse: function handleSignInResponse(response) {\n      var authentication = response.authentication;\n      self.token = authentication.accessToken;\n      api.setToken(authentication.accessToken);\n    }\n  };\n}).actions(function (self) {\n  return {\n    attemptSignIn: function attemptSignIn(router) {\n      if (self.authUrl) {\n        void router.push(self.authUrl);\n      }\n\n      self.setLastLoginAttempt(nanoid());\n    }\n  };\n});\nexport var createAuthStoreDefaultModel = function createAuthStoreDefaultModel() {\n  return types.optional(AuthStoreModel, {});\n};","map":{"version":3,"sources":["/Users/trevorcoleman/dev/trevor-coleman/EmmenthalCloud/app/models/auth-store/auth-store.ts"],"names":["types","UserModel","api","nanoid","AuthStoreModel","model","props","authenticated","lastLoginAttempt","maybe","string","authUrl","user","optional","token","views","self","actions","handleSignIn","result","console","table","setLastLoginAttempt","id","handleSignInResponse","response","authentication","accessToken","setToken","attemptSignIn","router","push","createAuthStoreDefaultModel"],"mappings":"AAAA,SAAgCA,KAAhC,QAA6C,iBAA7C;AACA,SAASC,SAAT;AACA,SAASC,GAAT;AACA,SAASC,MAAT,QAAuB,QAAvB;AAKA,OAAO,IAAMC,cAAc,GAAGJ,KAAK,CAChCK,KAD2B,CACrB,WADqB,EAE3BC,KAF2B,CAErB;AACLC,EAAAA,aAAa,EAAE,KADV;AAELC,EAAAA,gBAAgB,EAAER,KAAK,CAACS,KAAN,CAAYT,KAAK,CAACU,MAAlB,CAFb;AAGLC,EAAAA,OAAO,EAAEX,KAAK,CAACS,KAAN,CAAYT,KAAK,CAACU,MAAlB,CAHJ;AAILE,EAAAA,IAAI,EAAEZ,KAAK,CAACa,QAAN,CAAeZ,SAAf,EAA0B,EAA1B,CAJD;AAKLa,EAAAA,KAAK,EAAEd,KAAK,CAACa,QAAN,CAAeb,KAAK,CAACU,MAArB,EAA6B,EAA7B;AALF,CAFqB,EAS3BK,KAT2B,CASrB,UAACC,IAAD;AAAA,SAAW,EAAX;AAAA,CATqB,EAU3BC,OAV2B,CAUnB,UAACD,IAAD;AAAA,SAAW;AAClBE,IAAAA,YADkB,wBACLC,MADK,EACiB;AACjCC,MAAAA,OAAO,CAACC,KAAR,CAAc,eAAd,EAA+BF,MAA/B;AACA,UAAQR,OAAR,GAAyCQ,MAAzC,CAAQR,OAAR;AAAA,UAAiBJ,aAAjB,GAAyCY,MAAzC,CAAiBZ,aAAjB;AAAA,UAAgCK,IAAhC,GAAyCO,MAAzC,CAAgCP,IAAhC;AAEAI,MAAAA,IAAI,CAACL,OAAL,GAAeA,OAAf;AACAK,MAAAA,IAAI,CAACT,aAAL,GAAqBA,aAArB;AACAS,MAAAA,IAAI,CAACJ,IAAL,GAAYA,IAAZ;AACD,KARiB;AASlBU,IAAAA,mBATkB,+BASEC,EATF,EASc;AAC9BP,MAAAA,IAAI,CAACR,gBAAL,GAAwBe,EAAxB;AACD;AAXiB,GAAX;AAAA,CAVmB,EAuB3BN,OAvB2B,CAuBnB,UAACD,IAAD;AAAA,SAAW;AAClBQ,IAAAA,oBADkB,gCACGC,QADH,EACa;AAC7B,UAAQC,cAAR,GAA2BD,QAA3B,CAAQC,cAAR;AACAV,MAAAA,IAAI,CAACF,KAAL,GAAaY,cAAc,CAACC,WAA5B;AACAzB,MAAAA,GAAG,CAAC0B,QAAJ,CAAaF,cAAc,CAACC,WAA5B;AACD;AALiB,GAAX;AAAA,CAvBmB,EA8B3BV,OA9B2B,CA8BnB,UAACD,IAAD;AAAA,SAAW;AAClBa,IAAAA,aADkB,yBACJC,MADI,EACI;AACpB,UAAId,IAAI,CAACL,OAAT,EAAkB;AAChB,aAAKmB,MAAM,CAACC,IAAP,CAAYf,IAAI,CAACL,OAAjB,CAAL;AACD;;AACDK,MAAAA,IAAI,CAACM,mBAAL,CAAyBnB,MAAM,EAA/B;AACD;AANiB,GAAX;AAAA,CA9BmB,CAAvB;AA+CP,OAAO,IAAM6B,2BAA2B,GAAG,SAA9BA,2BAA8B;AAAA,SAAMhC,KAAK,CAACa,QAAN,CAAeT,cAAf,EAA+B,EAA/B,CAAN;AAAA,CAApC","sourcesContent":["import { Instance, SnapshotOut, types } from \"mobx-state-tree\"\nimport { UserModel } from \"../user/user\"\nimport { api, IAuthContext } from \"../../services/api\"\nimport { nanoid } from \"nanoid\"\n\n/**\n * Model description here for TypeScript hints.\n */\nexport const AuthStoreModel = types\n  .model(\"AuthStore\")\n  .props({\n    authenticated: false,\n    lastLoginAttempt: types.maybe(types.string),\n    authUrl: types.maybe(types.string),\n    user: types.optional(UserModel, {}),\n    token: types.optional(types.string, \"\"),\n  })\n  .views((self) => ({})) // eslint-disable-line @typescript-eslint/no-unused-vars\n  .actions((self) => ({\n    handleSignIn(result: IAuthContext) {\n      console.table(\"signIn Result\", result)\n      const { authUrl, authenticated, user } = result\n\n      self.authUrl = authUrl\n      self.authenticated = authenticated\n      self.user = user\n    },\n    setLastLoginAttempt(id: string) {\n      self.lastLoginAttempt = id\n    },\n  }))\n  .actions((self) => ({\n    handleSignInResponse(response) {\n      const { authentication } = response\n      self.token = authentication.accessToken\n      api.setToken(authentication.accessToken)\n    },\n  }))\n  .actions((self) => ({\n    attemptSignIn(router) {\n      if (self.authUrl) {\n        void router.push(self.authUrl)\n      }\n      self.setLastLoginAttempt(nanoid())\n    },\n  }))\n\ntype AuthStoreType = Instance<typeof AuthStoreModel>\n\nexport interface AuthStore extends AuthStoreType {}\n\ntype AuthStoreSnapshotType = SnapshotOut<typeof AuthStoreModel>\n\nexport interface AuthStoreSnapshot extends AuthStoreSnapshotType {}\n\nexport const createAuthStoreDefaultModel = () => types.optional(AuthStoreModel, {})\n"]},"metadata":{},"sourceType":"module"}