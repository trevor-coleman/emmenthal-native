{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nexport function loadString(key) {\n  return _regeneratorRuntime.async(function loadString$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(key));\n\n        case 3:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 6:\n          _context.prev = 6;\n          _context.t0 = _context[\"catch\"](0);\n          return _context.abrupt(\"return\", null);\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n}\nexport function saveString(key, value) {\n  return _regeneratorRuntime.async(function saveString$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem(key, value));\n\n        case 3:\n          return _context2.abrupt(\"return\", true);\n\n        case 6:\n          _context2.prev = 6;\n          _context2.t0 = _context2[\"catch\"](0);\n          return _context2.abrupt(\"return\", false);\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n}\nexport function load(key) {\n  var almostThere;\n  return _regeneratorRuntime.async(function load$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(key));\n\n        case 3:\n          almostThere = _context3.sent;\n          return _context3.abrupt(\"return\", JSON.parse(almostThere));\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          return _context3.abrupt(\"return\", null);\n\n        case 10:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[0, 7]], Promise);\n}\nexport function save(key, value) {\n  return _regeneratorRuntime.async(function save$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem(key, JSON.stringify(value)));\n\n        case 3:\n          return _context4.abrupt(\"return\", true);\n\n        case 6:\n          _context4.prev = 6;\n          _context4.t0 = _context4[\"catch\"](0);\n          return _context4.abrupt(\"return\", false);\n\n        case 9:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n}\nexport function remove(key) {\n  return _regeneratorRuntime.async(function remove$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.removeItem(key));\n\n        case 3:\n          _context5.next = 7;\n          break;\n\n        case 5:\n          _context5.prev = 5;\n          _context5.t0 = _context5[\"catch\"](0);\n\n        case 7:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, [[0, 5]], Promise);\n}\nexport function clear() {\n  return _regeneratorRuntime.async(function clear$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.clear());\n\n        case 3:\n          _context6.next = 7;\n          break;\n\n        case 5:\n          _context6.prev = 5;\n          _context6.t0 = _context6[\"catch\"](0);\n\n        case 7:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, [[0, 5]], Promise);\n}","map":{"version":3,"sources":["/Users/trevorcoleman/dev/trevor-coleman/EmmenthalCloud/app/utils/storage/storage.ts"],"names":["AsyncStorage","loadString","key","getItem","saveString","value","setItem","load","almostThere","JSON","parse","save","stringify","remove","removeItem","clear"],"mappings":";AAAA,OAAOA,YAAP,MAAyB,2CAAzB;AAOA,OAAO,SAAeC,UAAf,CAA0BC,GAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEUF,YAAY,CAACG,OAAb,CAAqBD,GAArB,CAFV;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,2CAKI,IALJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeP,OAAO,SAAeE,UAAf,CAA0BF,GAA1B,EAAuCG,KAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEGL,YAAY,CAACM,OAAb,CAAqBJ,GAArB,EAA0BG,KAA1B,CAFH;;AAAA;AAAA,4CAGI,IAHJ;;AAAA;AAAA;AAAA;AAAA,4CAKI,KALJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcP,OAAO,SAAeE,IAAf,CAAoBL,GAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEuBF,YAAY,CAACG,OAAb,CAAqBD,GAArB,CAFvB;;AAAA;AAEGM,UAAAA,WAFH;AAAA,4CAGIC,IAAI,CAACC,KAAL,CAAWF,WAAX,CAHJ;;AAAA;AAAA;AAAA;AAAA,4CAKI,IALJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeP,OAAO,SAAeG,IAAf,CAAoBT,GAApB,EAAiCG,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEGL,YAAY,CAACM,OAAb,CAAqBJ,GAArB,EAA0BO,IAAI,CAACG,SAAL,CAAeP,KAAf,CAA1B,CAFH;;AAAA;AAAA,4CAGI,IAHJ;;AAAA;AAAA;AAAA;AAAA,4CAKI,KALJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcP,OAAO,SAAeQ,MAAf,CAAsBX,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEGF,YAAY,CAACc,UAAb,CAAwBZ,GAAxB,CAFH;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASP,OAAO,SAAea,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEGf,YAAY,CAACe,KAAb,EAFH;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import AsyncStorage from \"@react-native-async-storage/async-storage\"\n\n/**\n * Loads a string from storage.\n *\n * @param key The key to fetch.\n */\nexport async function loadString(key: string): Promise<string | null> {\n  try {\n    return await AsyncStorage.getItem(key)\n  } catch {\n    // not sure why this would fail... even reading the RN docs I'm unclear\n    return null\n  }\n}\n\n/**\n * Saves a string to storage.\n *\n * @param key The key to fetch.\n * @param value The value to store.\n */\nexport async function saveString(key: string, value: string): Promise<boolean> {\n  try {\n    await AsyncStorage.setItem(key, value)\n    return true\n  } catch {\n    return false\n  }\n}\n\n/**\n * Loads something from storage and runs it thru JSON.parse.\n *\n * @param key The key to fetch.\n */\nexport async function load(key: string): Promise<any | null> {\n  try {\n    const almostThere = await AsyncStorage.getItem(key)\n    return JSON.parse(almostThere)\n  } catch {\n    return null\n  }\n}\n\n/**\n * Saves an object to storage.\n *\n * @param key The key to fetch.\n * @param value The value to store.\n */\nexport async function save(key: string, value: any): Promise<boolean> {\n  try {\n    await AsyncStorage.setItem(key, JSON.stringify(value))\n    return true\n  } catch {\n    return false\n  }\n}\n\n/**\n * Removes something from storage.\n *\n * @param key The key to kill.\n */\nexport async function remove(key: string): Promise<void> {\n  try {\n    await AsyncStorage.removeItem(key)\n  } catch {}\n}\n\n/**\n * Burn it all to the ground.\n */\nexport async function clear(): Promise<void> {\n  try {\n    await AsyncStorage.clear()\n  } catch {}\n}\n"]},"metadata":{},"sourceType":"module"}