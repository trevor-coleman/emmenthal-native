{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = __importDefault(require(\"react\"));\n\nvar react_native_1 = require(\"react-native-web/dist/index\");\n\nvar type_1 = require(\"./type\");\n\nexports.MeasureElement = function (props) {\n  var ref = react_1.default.useRef();\n\n  var bindToWindow = function bindToWindow(frame, window) {\n    if (frame.origin.x < window.size.width) {\n      return frame;\n    }\n\n    var boundFrame = new type_1.Frame(frame.origin.x - window.size.width, frame.origin.y, frame.size.width, frame.size.height);\n    return bindToWindow(boundFrame, window);\n  };\n\n  var onUIManagerMeasure = function onUIManagerMeasure(x, y, w, h) {\n    var originY = props.shouldUseTopInsets ? y + react_native_1.StatusBar.currentHeight || 0 : y;\n    var frame = bindToWindow(new type_1.Frame(x, originY, w, h), type_1.Frame.window());\n    props.onMeasure(frame);\n  };\n\n  var measureSelf = function measureSelf() {\n    var node = react_native_1.findNodeHandle(ref.current);\n    react_native_1.UIManager.measureInWindow(node, onUIManagerMeasure);\n  };\n\n  if (props.force) {\n    measureSelf();\n  }\n\n  return react_1.default.cloneElement(props.children, {\n    ref: ref,\n    onLayout: measureSelf\n  });\n};\n\nexports.MeasureElement.defaultProps = {\n  shouldUseTopInsets: false\n};","map":{"version":3,"sources":["../../../../../../src/components/devsupport/components/measure/measure.component.tsx"],"names":[],"mappings":";AAAA;;;;AAIG;;;;;;;;;;;;AAEH,IAAA,OAAA,GAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;AAMA,IAAA,MAAA,GAAA,OAAA,UAAA;;AAmCa,OAAA,CAAA,cAAA,GAAgD,UAAC,KAAD,EAA4B;AAEvF,MAAM,GAAG,GAAG,OAAA,CAAA,OAAA,CAAM,MAAN,EAAZ;;AAEA,MAAM,YAAY,GAAG,SAAf,YAAe,CAAC,KAAD,EAAe,MAAf,EAAuC;AAC1D,QAAI,KAAK,CAAC,MAAN,CAAa,CAAb,GAAiB,MAAM,CAAC,IAAP,CAAY,KAAjC,EAAwC;AACtC,aAAO,KAAP;AACD;;AAED,QAAM,UAAU,GAAU,IAAI,MAAA,CAAA,KAAJ,CACxB,KAAK,CAAC,MAAN,CAAa,CAAb,GAAiB,MAAM,CAAC,IAAP,CAAY,KADL,EAExB,KAAK,CAAC,MAAN,CAAa,CAFW,EAGxB,KAAK,CAAC,IAAN,CAAW,KAHa,EAIxB,KAAK,CAAC,IAAN,CAAW,MAJa,CAA1B;AAOA,WAAO,YAAY,CAAC,UAAD,EAAa,MAAb,CAAnB;AACD,GAbD;;AAeA,MAAM,kBAAkB,GAAG,SAArB,kBAAqB,CAAC,CAAD,EAAY,CAAZ,EAAuB,CAAvB,EAAkC,CAAlC,EAAqD;AAC9E,QAAM,OAAO,GAAG,KAAK,CAAC,kBAAN,GAA2B,CAAC,GAAG,cAAA,CAAA,SAAA,CAAU,aAAd,IAA+B,CAA1D,GAA8D,CAA9E;AACA,QAAM,KAAK,GAAU,YAAY,CAAC,IAAI,MAAA,CAAA,KAAJ,CAAU,CAAV,EAAa,OAAb,EAAsB,CAAtB,EAAyB,CAAzB,CAAD,EAA8B,MAAA,CAAA,KAAA,CAAM,MAAN,EAA9B,CAAjC;AACA,IAAA,KAAK,CAAC,SAAN,CAAgB,KAAhB;AACD,GAJD;;AAMA,MAAM,WAAW,GAAG,SAAd,WAAc,GAAW;AAC7B,QAAM,IAAI,GAAW,cAAA,CAAA,cAAA,CAAe,GAAG,CAAC,OAAnB,CAArB;AACA,IAAA,cAAA,CAAA,SAAA,CAAU,eAAV,CAA0B,IAA1B,EAAgC,kBAAhC;AACD,GAHD;;AAKA,MAAI,KAAK,CAAC,KAAV,EAAiB;AACf,IAAA,WAAW;AACZ;;AAED,SAAO,OAAA,CAAA,OAAA,CAAM,YAAN,CAAmB,KAAK,CAAC,QAAzB,EAAmC;AAAE,IAAA,GAAG,EAAH,GAAF;AAAO,IAAA,QAAQ,EAAE;AAAjB,GAAnC,CAAP;AACD,CAnCY;;AAqCb,OAAA,CAAA,cAAA,CAAe,YAAf,GAA8B;AAC5B,EAAA,kBAAkB,EAAE;AADQ,CAA9B","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst react_1 = __importDefault(require(\"react\"));\nconst react_native_1 = require(\"react-native\");\nconst type_1 = require(\"./type\");\n/**\n * Measures child element size and it's screen position asynchronously.\n * Returns measure result in `onMeasure` callback.\n *\n * Usage:\n *\n * ```tsx\n * const onMeasure = (frame: Frame): void => {\n *   const { x, y } = frame.origin;\n *   const { width, height } = frame.size;\n *   ...\n * };\n *\n * <MeasureElement\n *   shouldUseTopInsets={ModalService.getShouldUseTopInsets}\n *   onMeasure={onMeasure}>\n *   <ElementToMeasure />\n * </MeasureElement>\n * ```\n *\n * By default, it measures each time onLayout is called,\n * but `force` property may be used to measure any time it's needed.\n * DON'T USE THIS FLAG IF THE COMPONENT RENDERS FIRST TIME OR YOU KNOW `onLayout` WILL BE CALLED.\n */\nexports.MeasureElement = (props) => {\n    const ref = react_1.default.useRef();\n    const bindToWindow = (frame, window) => {\n        if (frame.origin.x < window.size.width) {\n            return frame;\n        }\n        const boundFrame = new type_1.Frame(frame.origin.x - window.size.width, frame.origin.y, frame.size.width, frame.size.height);\n        return bindToWindow(boundFrame, window);\n    };\n    const onUIManagerMeasure = (x, y, w, h) => {\n        const originY = props.shouldUseTopInsets ? y + react_native_1.StatusBar.currentHeight || 0 : y;\n        const frame = bindToWindow(new type_1.Frame(x, originY, w, h), type_1.Frame.window());\n        props.onMeasure(frame);\n    };\n    const measureSelf = () => {\n        const node = react_native_1.findNodeHandle(ref.current);\n        react_native_1.UIManager.measureInWindow(node, onUIManagerMeasure);\n    };\n    if (props.force) {\n        measureSelf();\n    }\n    return react_1.default.cloneElement(props.children, { ref, onLayout: measureSelf });\n};\nexports.MeasureElement.defaultProps = {\n    shouldUseTopInsets: false,\n};\n//# sourceMappingURL=measure.component.js.map"]},"metadata":{},"sourceType":"script"}