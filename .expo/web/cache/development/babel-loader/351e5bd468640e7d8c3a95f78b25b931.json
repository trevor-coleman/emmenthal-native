{"ast":null,"code":"import React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { storiesOf } from \"@storybook/react-native\";\nimport { StoryScreen, Story, UseCase } from \"../../../storybook/views\";\nimport { Checkbox } from \"./checkbox\";\nimport { Toggle } from \"../../utils/react-powerplug\";\nvar arrayStyle = [{\n  paddingVertical: 40\n}, {\n  alignSelf: \"flex-end\"\n}];\nvar arrayOutlineStyle = [{\n  borderColor: \"#b443c9\"\n}, {\n  borderWidth: 25\n}];\nvar arrayFillStyle = [{\n  backgroundColor: \"#55e0ff\"\n}];\nstoriesOf(\"Checkbox\", module).addDecorator(function (fn) {\n  return React.createElement(StoryScreen, null, fn());\n}).add(\"Behaviour\", function () {\n  return React.createElement(Story, null, React.createElement(UseCase, {\n    text: \"The Checkbox\",\n    usage: \"Use the checkbox to represent on/off states.\"\n  }, React.createElement(Toggle, {\n    initial: false\n  }, function (_ref) {\n    var on = _ref.on,\n        toggle = _ref.toggle;\n    return React.createElement(Checkbox, {\n      value: on,\n      onToggle: toggle,\n      text: \"Toggle me\"\n    });\n  })), React.createElement(UseCase, {\n    text: \"value = true\",\n    usage: \"This is permanently on.\"\n  }, React.createElement(Checkbox, {\n    value: true,\n    text: \"Always on\"\n  })), React.createElement(UseCase, {\n    text: \"value = false\",\n    usage: \"This is permanantly off.\"\n  }, React.createElement(Checkbox, {\n    value: false,\n    text: \"Always off\"\n  })));\n}).add(\"Styling\", function () {\n  return React.createElement(Story, null, React.createElement(UseCase, {\n    text: \"multiline = true\",\n    usage: \"For really really long text\"\n  }, React.createElement(Toggle, {\n    initial: false\n  }, function (_ref2) {\n    var on = _ref2.on,\n        toggle = _ref2.toggle;\n    return React.createElement(View, null, React.createElement(Checkbox, {\n      text: \"We\\u2019re an App Design & Development Team. Experts in mobile & web technologies. We create beautiful, functional mobile apps and websites.\",\n      value: on,\n      multiline: true,\n      onToggle: toggle\n    }));\n  })), React.createElement(UseCase, {\n    text: \".style\",\n    usage: \"Override the container style\"\n  }, React.createElement(Toggle, {\n    initial: false\n  }, function (_ref3) {\n    var on = _ref3.on,\n        toggle = _ref3.toggle;\n    return React.createElement(View, null, React.createElement(Checkbox, {\n      text: \"Hello there!\",\n      value: on,\n      style: {\n        backgroundColor: \"purple\",\n        marginLeft: 40,\n        paddingVertical: 30,\n        paddingLeft: 60\n      },\n      onToggle: toggle\n    }));\n  })), React.createElement(UseCase, {\n    text: \".outlineStyle\",\n    usage: \"Override the outline style\"\n  }, React.createElement(Toggle, {\n    initial: false\n  }, function (_ref4) {\n    var on = _ref4.on,\n        toggle = _ref4.toggle;\n    return React.createElement(View, null, React.createElement(Checkbox, {\n      text: \"Outline is the box frame\",\n      value: on,\n      outlineStyle: {\n        borderColor: \"green\",\n        borderRadius: 10,\n        borderWidth: 4,\n        width: 60,\n        height: 20\n      },\n      onToggle: toggle\n    }));\n  })), React.createElement(UseCase, {\n    text: \".fillStyle\",\n    usage: \"Override the fill style\"\n  }, React.createElement(Toggle, {\n    initial: false\n  }, function (_ref5) {\n    var on = _ref5.on,\n        toggle = _ref5.toggle;\n    return React.createElement(View, null, React.createElement(Checkbox, {\n      text: \"Fill er up\",\n      value: on,\n      fillStyle: {\n        backgroundColor: \"red\",\n        borderRadius: 8\n      },\n      onToggle: toggle\n    }));\n  })), React.createElement(UseCase, {\n    text: \"Array style\",\n    usage: \"Use array styles\"\n  }, React.createElement(Toggle, {\n    initial: false\n  }, function (_ref6) {\n    var on = _ref6.on,\n        toggle = _ref6.toggle;\n    return React.createElement(View, null, React.createElement(Checkbox, {\n      text: \"Check it twice\",\n      value: on,\n      onToggle: toggle,\n      style: arrayStyle,\n      outlineStyle: arrayOutlineStyle,\n      fillStyle: arrayFillStyle\n    }));\n  })));\n});","map":{"version":3,"sources":["/Users/trevorcoleman/dev/trevor-coleman/EmmenthalCloud/app/components/checkbox/checkbox.story.tsx"],"names":["React","storiesOf","StoryScreen","Story","UseCase","Checkbox","Toggle","arrayStyle","paddingVertical","alignSelf","arrayOutlineStyle","borderColor","borderWidth","arrayFillStyle","backgroundColor","module","addDecorator","fn","add","on","toggle","marginLeft","paddingLeft","borderRadius","width","height"],"mappings":"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","sourcesContent":["/* eslint-disable react-native/no-inline-styles */\n/* eslint-disable react-native/no-color-literals */\n\nimport React from \"react\"\nimport { View, ViewStyle } from \"react-native\"\nimport { storiesOf } from \"@storybook/react-native\"\nimport { StoryScreen, Story, UseCase } from \"../../../storybook/views\"\nimport { Checkbox } from \"./checkbox\"\nimport { Toggle } from \"../../utils/react-powerplug\"\n\ndeclare let module\n\nconst arrayStyle: ViewStyle[] = [{ paddingVertical: 40 }, { alignSelf: \"flex-end\" }]\nconst arrayOutlineStyle: ViewStyle[] = [{ borderColor: \"#b443c9\" }, { borderWidth: 25 }]\nconst arrayFillStyle: ViewStyle[] = [{ backgroundColor: \"#55e0ff\" }]\n\nstoriesOf(\"Checkbox\", module)\n  .addDecorator((fn) => <StoryScreen>{fn()}</StoryScreen>)\n  .add(\"Behaviour\", () => (\n    <Story>\n      <UseCase text=\"The Checkbox\" usage=\"Use the checkbox to represent on/off states.\">\n        <Toggle initial={false}>\n          {({ on, toggle }) => <Checkbox value={on} onToggle={toggle} text=\"Toggle me\" />}\n        </Toggle>\n      </UseCase>\n      <UseCase text=\"value = true\" usage=\"This is permanently on.\">\n        <Checkbox value={true} text=\"Always on\" />\n      </UseCase>\n      <UseCase text=\"value = false\" usage=\"This is permanantly off.\">\n        <Checkbox value={false} text=\"Always off\" />\n      </UseCase>\n    </Story>\n  ))\n  .add(\"Styling\", () => (\n    <Story>\n      <UseCase text=\"multiline = true\" usage=\"For really really long text\">\n        <Toggle initial={false}>\n          {({ on, toggle }) => (\n            <View>\n              <Checkbox\n                text=\"Weâ€™re an App Design & Development Team. Experts in mobile & web technologies. We create beautiful, functional mobile apps and websites.\"\n                value={on}\n                multiline\n                onToggle={toggle}\n              />\n            </View>\n          )}\n        </Toggle>\n      </UseCase>\n      <UseCase text=\".style\" usage=\"Override the container style\">\n        <Toggle initial={false}>\n          {({ on, toggle }) => (\n            <View>\n              <Checkbox\n                text=\"Hello there!\"\n                value={on}\n                style={{\n                  backgroundColor: \"purple\",\n                  marginLeft: 40,\n                  paddingVertical: 30,\n                  paddingLeft: 60,\n                }}\n                onToggle={toggle}\n              />\n            </View>\n          )}\n        </Toggle>\n      </UseCase>\n      <UseCase text=\".outlineStyle\" usage=\"Override the outline style\">\n        <Toggle initial={false}>\n          {({ on, toggle }) => (\n            <View>\n              <Checkbox\n                text=\"Outline is the box frame\"\n                value={on}\n                outlineStyle={{\n                  borderColor: \"green\",\n                  borderRadius: 10,\n                  borderWidth: 4,\n                  width: 60,\n                  height: 20,\n                }}\n                onToggle={toggle}\n              />\n            </View>\n          )}\n        </Toggle>\n      </UseCase>\n      <UseCase text=\".fillStyle\" usage=\"Override the fill style\">\n        <Toggle initial={false}>\n          {({ on, toggle }) => (\n            <View>\n              <Checkbox\n                text=\"Fill er up\"\n                value={on}\n                fillStyle={{ backgroundColor: \"red\", borderRadius: 8 }}\n                onToggle={toggle}\n              />\n            </View>\n          )}\n        </Toggle>\n      </UseCase>\n\n      <UseCase text=\"Array style\" usage=\"Use array styles\">\n        <Toggle initial={false}>\n          {({ on, toggle }) => (\n            <View>\n              <Checkbox\n                text=\"Check it twice\"\n                value={on}\n                onToggle={toggle}\n                style={arrayStyle}\n                outlineStyle={arrayOutlineStyle}\n                fillStyle={arrayFillStyle}\n              />\n            </View>\n          )}\n        </Toggle>\n      </UseCase>\n    </Story>\n  ))\n"]},"metadata":{},"sourceType":"module"}