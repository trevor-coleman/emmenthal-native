{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport \"./i18n\";\nimport \"./utils/ignore-warnings\";\nimport React, { useState, useEffect } from \"react\";\nimport { SafeAreaProvider, initialWindowMetrics } from \"react-native-safe-area-context\";\nimport { initFonts } from \"./theme/fonts\";\nimport * as storage from \"./utils/storage\";\nimport { AppNavigator, useNavigationPersistence } from \"./navigators\";\nimport { RootStoreProvider, setupRootStore } from \"./models\";\nimport { ToggleStorybook } from \"../storybook/toggle-storybook\";\nimport { ErrorBoundary } from \"./screens/error/error-boundary\";\nimport * as eva from \"@eva-design/eva\";\nimport { ApplicationProvider } from \"@ui-kitten/components\";\nimport { initialize } from \"./services/firebase\";\ninitialize();\nexport var NAVIGATION_PERSISTENCE_KEY = \"NAVIGATION_STATE\";\n\nfunction App() {\n  var _useState = useState(undefined),\n      _useState2 = _slicedToArray(_useState, 2),\n      rootStore = _useState2[0],\n      setRootStore = _useState2[1];\n\n  var _useNavigationPersist = useNavigationPersistence(storage, NAVIGATION_PERSISTENCE_KEY),\n      initialNavigationState = _useNavigationPersist.initialNavigationState,\n      onNavigationStateChange = _useNavigationPersist.onNavigationStateChange,\n      isNavigationStateRestored = _useNavigationPersist.isRestored;\n\n  useEffect(function () {\n    ;\n\n    (function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(initFonts());\n\n            case 2:\n              setupRootStore().then(setRootStore);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n  if (!rootStore || !isNavigationStateRestored) return null;\n  return React.createElement(ToggleStorybook, null, React.createElement(RootStoreProvider, {\n    value: rootStore\n  }, React.createElement(ApplicationProvider, _extends({}, eva, {\n    theme: eva.light\n  }), React.createElement(SafeAreaProvider, {\n    initialMetrics: initialWindowMetrics\n  }, React.createElement(ErrorBoundary, {\n    catchErrors: \"always\"\n  }, React.createElement(AppNavigator, {\n    initialState: initialNavigationState,\n    onStateChange: onNavigationStateChange\n  }))))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/trevorcoleman/dev/trevor-coleman/EmmenthalCloud/app/app.tsx"],"names":["React","useState","useEffect","SafeAreaProvider","initialWindowMetrics","initFonts","storage","AppNavigator","useNavigationPersistence","RootStoreProvider","setupRootStore","ToggleStorybook","ErrorBoundary","eva","ApplicationProvider","initialize","NAVIGATION_PERSISTENCE_KEY","App","undefined","rootStore","setRootStore","initialNavigationState","onNavigationStateChange","isNavigationStateRestored","isRestored","then","light"],"mappings":";;;AAWA;AACA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,gBAAT,EAA2BC,oBAA3B,QAAuD,gCAAvD;AACA,SAASC,SAAT;AACA,OAAO,KAAKC,OAAZ;AACA,SAASC,YAAT,EAAuBC,wBAAvB;AACA,SAAoBC,iBAApB,EAAuCC,cAAvC;AACA,SAASC,eAAT;AACA,SAASC,aAAT;AACA,OAAO,KAAKC,GAAZ,MAAqB,iBAArB;AACA,SAASC,mBAAT,QAAkD,uBAAlD;AAEA,SAASC,UAAT;AAEAA,UAAU;AAMV,OAAO,IAAMC,0BAA0B,GAAG,kBAAnC;;AAKP,SAASC,GAAT,GAAe;AACb,kBAAkChB,QAAQ,CAAwBiB,SAAxB,CAA1C;AAAA;AAAA,MAAOC,SAAP;AAAA,MAAkBC,YAAlB;;AACA,8BAIIZ,wBAAwB,CAACF,OAAD,EAAUU,0BAAV,CAJ5B;AAAA,MACEK,sBADF,yBACEA,sBADF;AAAA,MAEEC,uBAFF,yBAEEA,uBAFF;AAAA,MAGcC,yBAHd,yBAGEC,UAHF;;AAOAtB,EAAAA,SAAS,CAAC,YAAM;AACd;;AAAC,KAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACMG,SAAS,EADf;;AAAA;AAEAK,cAAAA,cAAc,GAAGe,IAAjB,CAAsBL,YAAtB;;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAIF,GALQ,EAKN,EALM,CAAT;AAaA,MAAI,CAACD,SAAD,IAAc,CAACI,yBAAnB,EAA8C,OAAO,IAAP;AAG9C,SACE,oBAAC,eAAD,QACE,oBAAC,iBAAD;AAAmB,IAAA,KAAK,EAAEJ;AAA1B,KACE,oBAAC,mBAAD,eAAyBN,GAAzB;AAA8B,IAAA,KAAK,EAAEA,GAAG,CAACa;AAAzC,MACE,oBAAC,gBAAD;AAAkB,IAAA,cAAc,EAAEtB;AAAlC,KACE,oBAAC,aAAD;AAAe,IAAA,WAAW,EAAE;AAA5B,KACE,oBAAC,YAAD;AACE,IAAA,YAAY,EAAEiB,sBADhB;AAEE,IAAA,aAAa,EAAEC;AAFjB,IADF,CADF,CADF,CADF,CADF,CADF;AAgBD;;AAED,eAAeL,GAAf","sourcesContent":["/**\n * Welcome to the main entry point of the app. In this file, we'll\n * be kicking off our app.\n *\n * Most of this file is boilerplate and you shouldn't need to modify\n * it very often. But take some time to look through and understand\n * what is going on here.\n *\n * The app navigation resides in ./app/navigators, so head over there\n * if you're interested in adding screens and navigators.\n */\nimport \"./i18n\"\nimport \"./utils/ignore-warnings\"\nimport React, { useState, useEffect } from \"react\"\nimport { SafeAreaProvider, initialWindowMetrics } from \"react-native-safe-area-context\"\nimport { initFonts } from \"./theme/fonts\" // expo\nimport * as storage from \"./utils/storage\"\nimport { AppNavigator, useNavigationPersistence } from \"./navigators\"\nimport { RootStore, RootStoreProvider, setupRootStore } from \"./models\"\nimport { ToggleStorybook } from \"../storybook/toggle-storybook\"\nimport { ErrorBoundary } from \"./screens/error/error-boundary\"\nimport * as eva from \"@eva-design/eva\"\nimport { ApplicationProvider, Layout, Text } from \"@ui-kitten/components\"\n\nimport { initialize } from \"./services/firebase\"\n\ninitialize()\n\n// This puts screens in a native ViewController or Activity. If you want fully native\n// stack navigation, use `createNativeStackNavigator` in place of `createStackNavigator`:\n// https://github.com/kmagiera/react-native-screens#using-native-stack-navigator\n\nexport const NAVIGATION_PERSISTENCE_KEY = \"NAVIGATION_STATE\"\n\n/**\n * This is the root component of our app.\n */\nfunction App() {\n  const [rootStore, setRootStore] = useState<RootStore | undefined>(undefined)\n  const {\n    initialNavigationState,\n    onNavigationStateChange,\n    isRestored: isNavigationStateRestored,\n  } = useNavigationPersistence(storage, NAVIGATION_PERSISTENCE_KEY)\n\n  // Kick off initial async loading actions, like loading fonts and RootStore\n  useEffect(() => {\n    ;(async () => {\n      await initFonts() // expo\n      setupRootStore().then(setRootStore)\n    })()\n  }, [])\n\n  // Before we show the app, we have to wait for our state to be ready.\n  // In the meantime, don't render anything. This will be the background\n  // color set in native by rootView's background color.\n  // In iOS: application:didFinishLaunchingWithOptions:\n  // In Android: https://stackoverflow.com/a/45838109/204044\n  // You can replace with your own loading component if you wish.\n  if (!rootStore || !isNavigationStateRestored) return null\n\n  // otherwise, we're ready to render the app\n  return (\n    <ToggleStorybook>\n      <RootStoreProvider value={rootStore}>\n        <ApplicationProvider {...eva} theme={eva.light}>\n          <SafeAreaProvider initialMetrics={initialWindowMetrics}>\n            <ErrorBoundary catchErrors={\"always\"}>\n              <AppNavigator\n                initialState={initialNavigationState}\n                onStateChange={onNavigationStateChange}\n              />\n            </ErrorBoundary>\n          </SafeAreaProvider>\n        </ApplicationProvider>\n      </RootStoreProvider>\n    </ToggleStorybook>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}