{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { initializeApp } from \"firebase/app\";\nimport env from \"../../config/env\";\nimport \"firebase/auth\";\nimport { getAuth, GoogleAuthProvider, signInWithCredential, signInWithPopup } from \"firebase/auth\";\nimport React from \"react\";\nimport * as Google from \"expo-auth-session/providers/google\";\nimport { useStores } from \"../../models\";\nvar firebaseConfig = {\n  apiKey: env.FIREBASE_API_KEY,\n  authDomain: env.FIREBASE_AUTH_DOMAIN,\n  projectId: env.FIREBASE_PROJECT_ID,\n  storageBucket: env.FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: env.FIREBASE_MESSAGING_SENDER_ID,\n  appId: env.FIREBASE_APP_ID\n};\nvar SCOPES = [\"https://www.googleapis.com/auth/calendar.readonly\", \"https://www.googleapis.com/auth/userinfo.email\", \"https://www.googleapis.com/auth/userinfo.profile\"];\nexport var fb = initializeApp(firebaseConfig);\nexport var auth = getAuth(fb);\nexport function initialize() {\n  return fb;\n}\nvar CLIENT_ID = \"642341234083-66v5bmvrq9ubn0f34prhl42c3v3o0qrk.apps.googleusercontent.com\";\nexport function useGoogleSignIn() {\n  var _useStores = useStores(),\n      authStore = _useStores.authStore;\n\n  var _Google$useAuthReques = Google.useAuthRequest({\n    webClientId: CLIENT_ID,\n    scopes: SCOPES\n  }),\n      _Google$useAuthReques2 = _slicedToArray(_Google$useAuthReques, 3),\n      request = _Google$useAuthReques2[0],\n      response = _Google$useAuthReques2[1],\n      promptAsync = _Google$useAuthReques2[2];\n\n  React.useEffect(function () {\n    if ((response == null ? void 0 : response.type) === \"success\") {\n      authStore.handleSignInResponse(response);\n    }\n  }, [response]);\n  return {\n    request: request,\n    response: response,\n    promptAsync: promptAsync\n  };\n}\nexport function useFirebaseSignIn() {\n  var _Google$useIdTokenAut = Google.useIdTokenAuthRequest({\n    clientId: CLIENT_ID\n  }),\n      _Google$useIdTokenAut2 = _slicedToArray(_Google$useIdTokenAut, 3),\n      request = _Google$useIdTokenAut2[0],\n      response = _Google$useIdTokenAut2[1],\n      promptAsync = _Google$useIdTokenAut2[2];\n\n  React.useEffect(function () {\n    if ((response == null ? void 0 : response.type) === \"success\") {\n      var id_token = response.params.id_token;\n      var credential = GoogleAuthProvider.credential(id_token);\n      signInWithCredential(auth, credential);\n    }\n  }, [response]);\n  return {\n    request: request,\n    promptAsync: promptAsync\n  };\n}\nexport function useAltSignIn() {\n  var provider, result, credential, token, user, errorCode, errorMessage, email, _credential;\n\n  return _regeneratorRuntime.async(function useAltSignIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          provider = new GoogleAuthProvider();\n          SCOPES.forEach(function (scope) {\n            return provider.addScope(scope);\n          });\n          _context.prev = 2;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(signInWithPopup(auth, provider));\n\n        case 5:\n          result = _context.sent;\n          credential = GoogleAuthProvider.credentialFromResult(result);\n          token = credential.accessToken;\n          user = result.user;\n          return _context.abrupt(\"return\", {\n            result: result,\n            token: token,\n            user: user\n          });\n\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context[\"catch\"](2);\n          errorCode = _context.t0.code;\n          errorMessage = _context.t0.message;\n          email = _context.t0.email;\n          _credential = GoogleAuthProvider.credentialFromError(_context.t0);\n          console.log(\"Error: \", errorCode, errorMessage, email, _credential);\n          return _context.abrupt(\"return\", null);\n\n        case 20:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[2, 12]], Promise);\n}","map":{"version":3,"sources":["/Users/trevorcoleman/dev/trevor-coleman/EmmenthalCloud/app/services/firebase/index.ts"],"names":["initializeApp","env","getAuth","GoogleAuthProvider","signInWithCredential","signInWithPopup","React","Google","useStores","firebaseConfig","apiKey","FIREBASE_API_KEY","authDomain","FIREBASE_AUTH_DOMAIN","projectId","FIREBASE_PROJECT_ID","storageBucket","FIREBASE_STORAGE_BUCKET","messagingSenderId","FIREBASE_MESSAGING_SENDER_ID","appId","FIREBASE_APP_ID","SCOPES","fb","auth","initialize","CLIENT_ID","useGoogleSignIn","authStore","useAuthRequest","webClientId","scopes","request","response","promptAsync","useEffect","type","handleSignInResponse","useFirebaseSignIn","useIdTokenAuthRequest","clientId","id_token","params","credential","useAltSignIn","provider","forEach","scope","addScope","result","credentialFromResult","token","accessToken","user","errorCode","code","errorMessage","message","email","credentialFromError","console","log"],"mappings":"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","sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\"\nimport env from \"../../config/env\"\nimport \"firebase/auth\"\nimport { getAuth, GoogleAuthProvider, signInWithCredential, signInWithPopup } from \"firebase/auth\"\nimport React from \"react\"\nimport * as Google from \"expo-auth-session/providers/google\"\nimport { api } from \"../api\"\nimport { useStores } from \"../../models\"\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: env.FIREBASE_API_KEY,\n  authDomain: env.FIREBASE_AUTH_DOMAIN,\n  projectId: env.FIREBASE_PROJECT_ID,\n  storageBucket: env.FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: env.FIREBASE_MESSAGING_SENDER_ID,\n  appId: env.FIREBASE_APP_ID,\n}\n\nconst SCOPES = [\n  \"https://www.googleapis.com/auth/calendar.readonly\",\n  \"https://www.googleapis.com/auth/userinfo.email\",\n  \"https://www.googleapis.com/auth/userinfo.profile\",\n]\n\nexport const fb = initializeApp(firebaseConfig)\nexport const auth = getAuth(fb)\n\nexport function initialize() {\n  return fb\n}\n\nconst CLIENT_ID = \"642341234083-66v5bmvrq9ubn0f34prhl42c3v3o0qrk.apps.googleusercontent.com\"\n\nexport function useGoogleSignIn() {\n  const { authStore } = useStores()\n\n  const [request, response, promptAsync] = Google.useAuthRequest({\n    webClientId: CLIENT_ID,\n    scopes: SCOPES,\n  })\n\n  React.useEffect(() => {\n    if (response?.type === \"success\") {\n      authStore.handleSignInResponse(response)\n    }\n  }, [response])\n\n  return { request, response, promptAsync }\n}\n\nexport function useFirebaseSignIn() {\n  const [request, response, promptAsync] = Google.useIdTokenAuthRequest({\n    clientId: CLIENT_ID,\n  })\n  React.useEffect(() => {\n    if (response?.type === \"success\") {\n      const { id_token } = response.params\n      const credential = GoogleAuthProvider.credential(id_token)\n      signInWithCredential(auth, credential)\n    }\n  }, [response])\n\n  return { request, promptAsync }\n}\n\nexport async function useAltSignIn() {\n  const provider = new GoogleAuthProvider()\n  SCOPES.forEach((scope) => provider.addScope(scope))\n  try {\n    const result = await signInWithPopup(auth, provider)\n    // This gives you a Google Access Token. You can use it to access the Google API.\n    const credential = GoogleAuthProvider.credentialFromResult(result)\n    const token = credential.accessToken\n    // The signed-in user info.\n    const user = result.user\n    return { result, token, user }\n  } catch (error) {\n    // Handle Errors here.\n    const errorCode = error.code\n    const errorMessage = error.message\n    // The email of the user's account used.\n    const email = error.email\n    // The AuthCredential type that was used.\n    const credential = GoogleAuthProvider.credentialFromError(error)\n    console.log(\"Error: \", errorCode, errorMessage, email, credential)\n    return null\n  }\n}\n"]},"metadata":{},"sourceType":"module"}