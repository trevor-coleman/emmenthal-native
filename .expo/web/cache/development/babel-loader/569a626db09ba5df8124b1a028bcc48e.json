{"ast":null,"code":"import { createContext, useContext } from \"react\";\nvar RootStoreContext = createContext({});\nexport var RootStoreProvider = RootStoreContext.Provider;\nexport var useStores = function useStores() {\n  return useContext(RootStoreContext);\n};","map":{"version":3,"sources":["/Users/trevorcoleman/dev/trevor-coleman/EmmenthalCloud/app/models/root-store/root-store-context.ts"],"names":["createContext","useContext","RootStoreContext","RootStoreProvider","Provider","useStores"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,UAAxB,QAA0C,OAA1C;AASA,IAAMC,gBAAgB,GAAGF,aAAa,CAAY,EAAZ,CAAtC;AAKA,OAAO,IAAMG,iBAAiB,GAAGD,gBAAgB,CAACE,QAA3C;AAOP,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA,SAAMJ,UAAU,CAACC,gBAAD,CAAhB;AAAA,CAAlB","sourcesContent":["import { createContext, useContext } from \"react\"\nimport { RootStore } from \"./root-store\"\n\n/**\n * Create a context we can use to\n * - Provide access to our stores from our root component\n * - Consume stores in our screens (or other components, though it's\n *   preferable to just connect screens)\n */\nconst RootStoreContext = createContext<RootStore>({} as RootStore)\n\n/**\n * The provider our root component will use to expose the root store\n */\nexport const RootStoreProvider = RootStoreContext.Provider\n\n/**\n * A hook that screens can use to gain access to our stores, with\n * `const { someStore, someOtherStore } = useStores()`,\n * or less likely: `const rootStore = useStores()`\n */\nexport const useStores = () => useContext(RootStoreContext)\n"]},"metadata":{},"sourceType":"module"}